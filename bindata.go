// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/commands.tmpl
// templates/main.tmpl

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataTemplatesCommandsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x5f\x53\xe3\x38\x12\x7f\xb6\x3f\x85\xd6\xc5\x6c\xd9\x43\x70\x66\xf7\xb6\xee\x21\xb7\xb9\xaa\x19\x66\x06\xa8\x5a\x18\x0e\x98\xdd\x07\x8e\xba\x51\xec\x4e\xa2\xc2\x96\x8c\xac\xf0\xe7\xb2\xfe\xee\x57\x2d\xc9\xb6\x1c\x3b\x01\xe6\xee\xe5\x5e\xc0\xa8\x25\xf5\xff\x5f\x77\x8b\xf1\x98\x1c\x8a\x14\xc8\x02\x38\x48\xaa\x20\x25\xb3\x27\x22\x0a\xe0\xb4\x60\x07\x49\xc6\x0e\x2c\x41\xc8\x98\x7c\xfc\x42\xce\xbe\x5c\x91\x4f\x1f\x4f\xae\x62\x7f\x3c\x26\x97\x00\x64\xa9\x54\x51\x4e\xc6\xe3\x05\x53\xcb\xd5\x2c\x4e\x44\x3e\x4e\x29\x67\x90\x2d\x14\x7d\xca\x84\x1c\x0f\xde\xe5\xfb\x05\x4d\x6e\xe9\x02\x48\x4e\x19\xf7\x7d\x96\x17\x42\x2a\x12\xfa\xde\x7a\x4d\xd8\x9c\xc4\x27\x7a\xa1\x8c\x3f\xe7\x8a\x54\x55\x30\xcf\x55\xb0\x5e\x13\xe0\x29\xa9\xaa\xde\xa6\x4b\x25\x19\x5f\x94\xb8\xb1\x34\x9f\x3b\x36\x5f\xb1\x1c\x70\xa7\x62\x39\x38\xdb\x7c\x2f\x78\x9d\x0a\xe3\x24\x63\x41\xf7\x54\x71\xbb\x18\x83\x94\x42\x96\x1b\x04\x59\x8e\xff\x0d\x52\x64\x62\x31\xce\xc4\x62\x83\x58\x16\xf3\x9f\xfe\x32\x4e\xc4\x4c\xd2\x41\xca\x3d\x2b\x40\x6a\x8a\x28\x6e\x17\x31\xe3\xe3\xe5\xcf\x5c\xf0\xf1\x02\xb8\xca\x20\xa7\x3c\xbe\xff\x39\xf0\x23\xdf\x5f\xaf\x49\x0a\x73\xc6\x81\x04\x05\x95\x34\x2f\x03\xab\xff\x01\x91\x94\x2f\x80\xc4\x5f\x0a\xc5\x04\xa7\xd9\xb9\x26\x6b\xaa\x26\xb3\x39\x81\x3b\x12\x5f\x3d\x15\x40\x82\x99\x10\x19\x50\x6e\x0e\x7b\x5e\x92\xa7\xf1\xe7\x8c\x2e\xca\x30\x8a\x3f\x08\x91\x85\x68\xb4\xf8\xf0\xb7\x93\x33\x6a\x0c\x39\x22\x73\x9a\x95\x30\x22\x9a\xf0\x11\xca\x44\x32\xcd\x07\x89\x91\xe5\x00\x59\x09\x5d\x36\x8c\xab\xbf\xfe\x32\xc4\xe4\x04\x09\x03\x5c\xde\xbd\x96\xc3\x3c\x13\x74\x0b\x8f\xcf\x86\x34\xc4\x25\x7e\x09\x9f\xfe\x8d\x26\x06\x07\x2e\x0c\x82\x67\xee\x6b\xc2\xf4\xa0\x8d\x45\xc7\x67\x7f\x50\xa6\x40\x5a\x67\xf5\x9d\xf1\x40\x99\x3a\xc0\xeb\xcd\xbe\xed\x8e\xb1\xf4\xcb\x25\x26\x9a\xe1\xdf\x61\x99\x64\x2c\xbe\x04\x75\xb8\x2a\x95\xc8\x0d\x8f\x24\x4f\x23\xdf\xf7\xd8\x9c\xb8\x7c\x8f\x69\x69\x3f\xc9\xda\xf7\x3c\x13\x6a\xf1\x07\xc6\xd3\xf3\xe6\x58\xbd\x39\xf2\xbd\xca\x77\x92\x6c\xbd\x26\x7b\x1c\xc5\x9b\x4c\x49\x6c\xe5\xd4\x8b\xb4\x60\x7a\xed\x48\x6c\xac\x9e\xaf\x66\x19\x4b\x34\xcd\x7c\xb6\x3b\xfc\x7b\x2a\x49\x7d\xb8\xaa\x2e\x57\xb3\x44\xe4\x39\xe5\x29\xc1\x10\xf6\xfd\xf9\x8a\x27\x2e\x1d\xe4\x3d\x48\x14\xfb\xfa\x26\xa7\xc5\xb5\x81\x8a\x1b\xf3\x0b\x55\x91\xa0\x56\x92\x0f\x51\xd7\xda\x57\xd6\x23\x7b\xa5\xbe\x48\x8b\x64\xef\xb4\xf1\x30\x78\xce\xf3\x82\xb4\xf5\x7c\x30\xd1\xde\xb0\x77\x6c\xc6\xc4\xc8\xec\x5f\xc9\x6c\x63\xdf\xd7\x8b\xdf\x1a\x7a\x35\x32\xd2\xd4\x81\x53\xf9\xc6\xb0\x56\x3a\x51\x20\x3e\xe1\x85\x28\xe0\x97\xfa\x2f\x23\xe3\x78\x4c\xba\x76\xad\x2a\x8c\x8d\xc6\xa6\x48\x6d\x42\xc4\xf7\x5c\x0b\x0e\x1f\x08\x1b\xc6\xf1\x05\xdc\xad\x98\x84\xb4\x01\x97\xee\xcd\xc6\x22\x23\xd2\x48\x6e\x02\x87\xbc\xd5\xf8\x16\xff\x8e\x3f\x2d\x54\x1f\x52\x7e\x4c\xef\xe1\x83\x48\x9f\x48\x55\x8d\xc8\x0c\x3f\xac\x45\xeb\xd3\x11\x09\xdf\xb6\x08\x78\x01\x65\x21\x38\xc6\x3a\x32\xbd\xd0\x8e\xd4\x20\x80\xc7\x35\x24\x9b\x60\x5d\x52\x9e\x66\x20\xcf\xa9\x5a\xa2\x79\x74\x62\x1c\x9b\xb5\x3a\x6b\x7c\x0f\x03\x7e\x30\xac\xb4\x3b\xdd\x2b\xcc\x0d\x26\xa2\xab\x8a\x04\x64\x9f\x38\x64\xdf\xf3\x30\xb1\xbc\x36\x5e\x8c\xaa\x47\xa0\x6a\xb4\x30\x24\x8d\x05\x6c\x4e\xec\xc6\xe9\x94\x04\x81\x61\x56\xaf\x0c\x85\xf1\x75\x73\xdb\x09\x57\xf5\x55\x07\x8c\xa7\xf0\x18\x44\x37\xd7\x3a\x8a\x6e\x6a\x19\x56\x32\x43\x01\xcc\xa6\x7d\xad\xb7\xd6\x00\x15\xb6\x40\x64\xe3\x87\x8d\xc8\x9e\x76\x8d\x8e\x9f\x9e\x53\x51\xaa\xb6\x64\x98\x9d\xf1\x09\xc7\x92\xa3\x96\x35\xd4\x6a\x76\x53\xeb\xb2\x32\xbe\x80\x22\xa3\x09\x84\x2b\x99\x69\x30\xfa\xb6\xfe\xa6\xa3\xc3\x9e\xb6\x96\x5f\xaf\xbf\x55\xdf\x34\x6c\xb5\xa4\x26\x7c\x46\xe4\xa7\xa8\x66\x5d\x07\x7e\x17\xbf\x3c\x09\x77\x28\x32\xe2\xd8\x61\xc6\x80\xab\x18\xb5\x3c\x05\xb5\x14\xb8\x25\x8c\x30\x8b\x50\x86\xc8\xef\xa4\xf3\x8b\x14\xee\xeb\x7b\xb7\x02\xf9\xd4\x28\x8c\xcc\xa7\x44\xc2\x5d\xfc\x3e\x4d\xff\x81\x24\x53\x0a\x5a\x2c\x1e\x50\xca\x6a\xe4\x96\x2e\x87\xc1\x12\x68\x0a\x72\x98\xc3\xb1\xa6\xbd\x86\x45\x6b\x33\xc7\x64\xcf\xb4\x06\x5e\x37\x83\x27\x53\x62\xc1\xfe\x08\x14\x92\x74\x86\xfd\x49\x14\x53\x99\xc6\x82\xcd\xe2\xa7\x99\x9b\x64\x72\xae\xf9\x41\x47\xb3\x3e\x7c\xc6\x32\x0d\x3a\x5a\x41\xa7\x11\xe9\xdb\xf7\x05\x06\x9e\xe7\x2a\xbe\x2c\x24\xe3\x6a\x1e\x06\x6f\xee\x8d\x3d\x1c\x4b\x44\x0d\x17\xb7\x55\x18\xb0\xf4\x4b\x4c\xfd\x0a\x66\xb5\xe5\xbd\x7e\xc8\x0e\xe2\x9d\x35\x9a\x06\xbd\x1f\x5a\x28\x18\x96\xea\x50\x70\x05\x5c\x1d\xa0\x35\xeb\x46\xe3\x14\x52\x46\x2d\xfa\x05\xd8\x27\xa4\x4f\x16\x6f\xf0\xce\xa8\x15\xc5\x91\x04\xb3\xc6\x00\xe1\x07\x98\x0b\x09\xa1\x83\x63\x23\xeb\xf6\x11\x32\x8f\x4c\xaa\x95\x85\xc6\x55\x8c\x09\x94\xe8\xa3\x08\x2d\x86\xe1\xe2\x0f\x53\xc2\x59\x66\xc4\xb6\x45\x95\xb3\x6c\x64\x7e\x98\x06\x39\xfe\x43\xd2\x22\x04\x29\x47\x24\xc0\x94\x83\x52\x91\x39\x65\x19\xa4\x3a\x6a\xb4\x4c\x58\xde\x53\x48\x44\x0a\x69\x1f\xd6\x7d\xc3\x0e\x25\x89\x2f\x15\x55\xab\x52\x8f\x31\xbf\x92\x5f\xde\xbd\x33\x9c\xad\x30\x16\x12\xbe\xf2\x9c\xca\x72\x49\xb3\xba\x54\x84\x46\x89\x1f\x2d\x87\xe8\x6f\x3d\xd1\x5f\x22\x7b\x73\x6d\x86\x4d\x84\xb4\x77\xbb\xaa\x68\x5b\x57\x26\xe6\x76\x5a\xe4\x13\xfe\x9a\x87\xc1\xf1\xd5\xd5\x39\x79\x93\x4e\xc8\x9b\x32\x18\x6d\x2a\xd8\x2c\x68\x7f\x46\x8d\xad\xe8\x5c\x41\xa3\xab\x71\xe4\x7b\x5c\xda\xe6\x47\x54\xbd\xd6\xdc\x58\xd2\xdc\xe0\xea\x5f\xdb\x7e\x6a\x68\x26\x58\x39\x74\x1c\x81\x6d\x3c\xc8\x39\x4d\x60\x5d\x61\x02\xc5\x61\xcf\x53\x91\x0b\x3f\x16\xa9\xb5\x05\x3a\x52\x68\x5b\xf4\xbb\x45\x8b\xd1\x0f\xba\x79\xd5\x00\xed\xf6\xc3\xaf\xea\x4f\x9a\x56\xe8\x7f\xd1\xa9\x44\xc6\x6b\xda\x50\x54\x29\xc8\x0b\x85\xd2\xbd\xf3\x3d\x6f\x2e\x24\xa9\x97\x7e\xd5\xd2\x19\xe9\xe3\xf7\x66\xb1\x6c\x20\xcf\xee\xda\xdf\xf7\x4d\x5c\x74\xcc\x61\x63\x77\x48\xbb\x56\x93\xff\x46\xcf\x9e\x82\x91\x93\x35\x43\x79\xd0\x8f\xfe\x43\xb1\xca\x52\xc2\x85\x22\x09\xcd\x32\x62\xbd\xd4\x74\xa0\x75\xfc\xe3\x4f\x4c\x66\x9a\xa8\x15\xcd\x88\x13\x32\x35\x25\xa7\x2a\x59\x9a\xb6\xdd\x73\x6b\xb3\x5e\xb7\x8e\x3f\x35\xdf\x75\x6d\xf2\xcc\x6d\xc6\x50\x26\xee\x8f\x40\xe9\x4d\xbf\xd3\x6c\x65\xf2\x3b\xd6\xf8\xf8\xa8\x2c\x32\x5e\x42\x06\x89\x32\x08\x6e\x4b\xd9\xfb\x2c\xbb\x04\xa5\xb0\x4f\x09\xa3\x4e\x4e\x0c\xdb\xe2\x25\xc6\x58\x80\x22\xb5\xe4\xf7\x28\x8b\x31\x84\xb5\x84\xa7\x49\xae\xdc\x5a\x68\x53\x61\xae\x10\x08\xb5\x7c\xd7\x37\xb3\x27\x05\x3a\x9d\x3e\x3d\x16\x90\x28\x48\xc9\x9f\xc4\x94\x1c\x12\xbc\xb9\xc3\x6c\x8b\x46\xd6\xa6\xdf\x23\xef\x1f\x56\x42\x63\x7b\x44\xac\x95\x6c\x24\x6d\x6a\xa4\xa1\xda\xbb\x9a\x3e\x48\x23\x12\x8e\xd8\xf6\x54\x53\x3a\x37\xd8\xd5\x98\x66\x92\x96\x24\x94\xa3\x7d\x24\xd0\x64\x49\x52\x28\x31\x38\x49\xa9\xaf\x9a\x41\x42\x57\x25\x90\x37\x25\x61\xa5\x81\xbe\x9e\xcb\x76\xdb\xa2\x11\xd1\x99\xd0\x3d\xcf\x9b\x49\xa0\xb7\x2d\xad\xa9\xc6\x5e\xd5\x6d\x8d\xf0\x2f\xc5\x72\x88\x2f\x33\x80\x22\x34\x13\x7b\x46\xb1\x22\xbf\x35\xeb\x90\x08\x9e\x36\x88\x8b\x90\x69\xb3\xfc\xef\xd3\x9d\x69\xde\x35\xc9\x19\x3c\x84\xc1\x29\x7d\x64\xf9\x2a\xaf\x6f\x28\x09\x3c\x26\x00\xa9\x5b\xfd\xda\x32\xb1\x81\x8a\x1b\x63\xed\x05\x2c\x58\x89\x48\x5f\x76\xe7\x5f\x3d\xf0\x48\x21\x54\x5d\x15\x2e\x84\x50\x66\x9a\x2f\xbb\x23\x8d\xde\x34\x25\x3f\xea\x27\xa8\xf8\xd0\x50\xb4\xe4\x5f\x4b\x98\x74\x46\x1c\x33\x81\xea\x01\xd1\x10\xe2\x2b\xdb\xfc\x19\xca\x6f\x82\x2f\x26\x36\xa6\xe5\x6d\x2a\x1e\x78\x38\xf8\xf6\x31\xf2\x9b\x1e\xa4\x3f\x66\x4d\x89\x92\x2b\xf0\xdd\xa2\x59\xcb\x6f\x67\xd3\xe9\x06\x6f\x77\x07\x8a\xd0\xe4\xd5\x2e\x19\x7c\xcf\xbc\xb4\xe8\x16\xac\xf3\xca\x82\x8e\x44\xab\x6d\xb5\x08\x6e\xe8\x9a\x02\xcf\x13\x8d\xfc\x24\x01\xa9\x28\xe3\x04\xee\x81\x2b\x22\x64\x13\xe0\xd8\x57\x11\xe3\x56\xc6\x17\xae\xc1\x82\x0f\x99\x48\x6e\x31\x0a\x20\x59\x69\x01\xd1\x0e\xab\x12\x4a\x52\x08\xd3\x5a\x28\x41\x0a\x90\x4c\xa4\x0c\xa1\xf6\x89\x24\x4b\x48\x6e\xbf\x83\x63\x65\x1d\x8e\x4d\xa4\x55\x2c\x44\x75\x36\x86\xa2\x2d\x05\xd7\x33\x25\xd7\x3e\xfd\xd4\x8f\x3f\xed\x68\x8b\xc1\x6d\x12\x31\xc9\xd3\x2d\x26\x74\xc2\x2a\xfe\x5a\xb6\xb1\xd3\x4c\x00\xf1\xfb\x8c\x51\xd4\xbd\xc9\x61\xbb\x30\x21\xd7\x9d\x87\x15\xaf\x33\xc1\xf4\x4e\x79\x9e\xe6\xe1\x30\xd8\xec\xc8\xeb\xd7\x94\x01\x82\x1b\xe3\xcd\x9b\x99\xdd\xbb\x2d\xca\x75\xe8\xd5\xe1\x8d\x62\xcb\x45\x39\x21\xc6\x02\xa7\x8c\x63\xc6\x9f\xe1\x1a\x82\x4b\x06\x7c\x67\xa9\xae\xef\xb8\x58\xf1\x09\x41\xa3\x87\x68\xd1\xb7\x1d\x73\x8e\x08\x95\x8b\xb2\x31\x4a\xed\x14\xb7\xf5\x7d\x61\x73\xb4\xf7\xd8\x19\x82\x77\xc8\x85\x1c\xaf\xf1\xd6\x47\x52\x55\x37\xfd\x1e\x62\xa0\x8d\xf6\x3c\x2f\x13\x8b\xf8\x33\x55\x34\x0b\x23\xac\x09\x58\x81\xa2\xf8\xb4\x5c\x84\x81\xae\x10\xba\x73\xc0\x08\x8d\x6a\xaf\xf8\xae\x73\xcc\x5f\xb8\xc7\x8d\x5a\xfb\x3a\x69\x40\x1c\x61\x34\xd3\x25\xa9\x7e\xfa\x6e\x95\xa8\xc7\xaf\x30\xea\x3e\x9c\xb9\xd8\xff\xc2\xf7\xb3\x6e\xf8\x0f\x47\x7f\xdd\xd3\xc0\x23\xcd\x8b\x0c\x4a\xdb\x4f\xfa\xdd\xce\x06\x1e\xf5\xfd\x9f\xea\x4d\x36\xee\x9a\x43\xfb\x53\x12\x10\xfd\xa2\xd4\x20\x9b\x55\x1c\x5b\xf9\x30\x22\xfb\x24\xd0\xde\x6d\xe4\xb5\xc9\xa4\x17\x01\xbd\xf3\x4f\x1e\xf4\x4b\xdc\x8e\xbc\xdc\x92\x96\xdb\xb2\x72\x6b\x52\xee\xcc\xc9\x5e\x4a\x6e\x26\x5e\x35\x1a\x18\x9d\x77\xa5\xe3\x0b\xb3\xb1\x56\xe3\x98\xa5\x29\xf0\x86\x9d\xf9\x73\xa2\x7b\x8b\x86\x34\x28\x82\x75\xd5\xa4\x71\xac\xd9\x75\x24\xc5\xaa\xc0\xf3\x38\x1c\x09\x45\xe2\x2b\xba\x28\xab\x4a\xcf\xed\x4d\x2f\x82\x82\xeb\x97\x39\x43\x26\xef\xaa\x2a\x68\x53\xc7\x5c\xf4\x2c\x5a\x6c\xc3\x88\xef\x81\x88\xda\x1a\xfd\xa7\x07\xcf\x9b\x89\xf4\x69\xe4\xce\xce\x47\xa0\x70\x43\xd8\x7f\x5d\x30\xd7\x5f\x0f\x4b\x58\x55\x93\x1b\x9b\xd0\x83\x9d\xe9\x0e\x54\xf8\xca\xe9\x2c\x03\x2c\x7a\xd8\x4b\xa3\x40\x35\x34\x54\x3d\xb8\x76\x5b\xd3\xf8\x0c\x20\x2d\xeb\x11\x9f\x54\x15\x0e\x01\xad\x1b\xfe\xd5\x9a\xfc\x45\x83\xd6\xf3\x48\xf9\x5a\x7c\xdc\xf1\xc2\xdd\x3e\x6d\x7f\x9f\xcd\x0c\x92\x26\xf6\x29\x62\x63\x08\x6b\x86\x8f\x8d\x67\x91\xcf\x42\xe6\xd8\x84\x4a\xfb\x15\xee\x78\x0e\xd9\xc5\xdc\xde\x83\x9c\xdd\xb7\x8f\x96\xed\x50\x9f\x65\xe6\x85\xbb\xf3\x06\x46\x87\x66\x32\xbf\xc1\x89\xc1\x07\x5b\x07\xff\x06\x9f\x6e\x3b\x3c\xae\x83\xde\xab\x73\x70\x43\xa6\x4d\x10\xef\x61\x27\x7a\xd3\x32\xec\x44\xd8\x8e\x11\x76\x30\x1e\x87\xff\x83\x67\x5d\xd0\x3e\xa4\x3e\xfb\x6f\xbc\xb6\xac\x7b\x0f\xdb\x2b\x4e\x97\xa7\x8e\xd2\x52\x8f\x4e\xc2\x74\x71\x88\x24\x6e\x6b\xf4\xfa\xe9\xb9\xbd\x4f\x27\x7e\x63\xd4\x8d\xa1\x79\x7b\xe8\xee\x0c\xa0\xe7\xa7\x67\x37\x9a\x50\x01\xb9\xa8\xd3\x0c\x15\xec\x3f\xc8\xba\x93\xf1\x90\x87\xba\xff\xf5\x48\x37\x0d\xd6\x8b\xa2\xff\x7f\x93\xd9\xf0\x89\x2f\x41\x69\x2c\xdf\x63\xa9\x05\xf1\x67\x4d\xb5\xbb\xa3\xb4\x41\xbb\x0d\x2e\x87\x02\xd1\x71\x9f\x03\x92\x0f\x3b\xbb\xc8\x1d\xb6\xb0\x0f\x0c\x7a\xc6\x6e\x95\xaf\xba\xed\xe4\x46\x41\x37\x75\x57\x7f\x6f\x4e\x44\x4d\x6f\x39\xdc\x5a\xda\xb7\xcc\x30\x72\x9b\xc8\xca\xff\x4f\x00\x00\x00\xff\xff\x2b\xde\x13\xe9\x4c\x23\x00\x00")

func bindataTemplatesCommandsTmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesCommandsTmpl,
		"templates/commands.tmpl",
	)
}



func bindataTemplatesCommandsTmpl() (*asset, error) {
	bytes, err := bindataTemplatesCommandsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/commands.tmpl",
		size: 9036,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1600877408, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\x41\x4b\xc3\x40\x10\x85\xcf\x3b\xbf\x62\xc8\x41\x12\xb0\x9b\x7a\xed\xad\x68\x0e\x5e\xac\x88\x78\x5f\x37\x93\xed\x60\x76\x66\xd9\x6c\x4a\x25\xe4\xbf\x4b\x2a\xe2\xed\xbd\xf7\xf1\x1e\x2f\x39\xff\xe5\x02\x61\x74\x2c\x00\x1c\x93\xe6\x82\x35\x98\x2a\x70\x39\xcf\x9f\xd6\x6b\x6c\x7b\x27\x4c\x63\x28\xee\x7b\xd4\xdc\x6a\x22\x71\x89\x77\x7e\xe4\x5d\x20\xa1\xec\x8a\xe6\xd6\x8f\x5c\x41\x03\x30\xcc\xe2\x6f\x63\x75\x83\x0b\x18\x3f\xb2\x7d\x16\x2e\xf5\xdd\xa6\x1e\x55\x06\x0e\x0b\x18\x73\x4c\xe9\xc5\x45\x3a\x20\x62\xb5\x2c\x68\x37\x83\xeb\x5a\xdd\x83\x31\x9d\x5c\x5e\x33\x0d\x7c\x3d\xfc\xb3\x4e\x2e\x7f\xf8\x83\xf2\xc4\x2a\xb7\xea\x83\xdd\xdb\xfd\x96\xae\x0d\x80\x69\x5b\x7c\x3f\x3d\x9d\x0e\x78\xec\x7b\xcc\x14\x78\x2a\x94\xd1\x6b\x8c\x4e\xfa\x09\xcf\x94\xc9\xc2\xef\xa7\x37\xd5\x62\xbb\x2b\xf9\xb9\x50\xdd\xc0\x0a\x3f\x01\x00\x00\xff\xff\xd7\x90\x9c\xb4\x08\x01\x00\x00")

func bindataTemplatesMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesMainTmpl,
		"templates/main.tmpl",
	)
}



func bindataTemplatesMainTmpl() (*asset, error) {
	bytes, err := bindataTemplatesMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/main.tmpl",
		size: 264,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1600876056, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"templates/commands.tmpl": bindataTemplatesCommandsTmpl,
	"templates/main.tmpl":     bindataTemplatesMainTmpl,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"templates": {Func: nil, Children: map[string]*bintree{
		"commands.tmpl": {Func: bindataTemplatesCommandsTmpl, Children: map[string]*bintree{}},
		"main.tmpl": {Func: bindataTemplatesMainTmpl, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
